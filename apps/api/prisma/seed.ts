import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

const reactExpressTemplate = {
  "package.json": `{
  "name": "generated-app",
  "version": "1.0.0",
  "description": "Generated full-stack application",
  "main": "server.js",
  "scripts": {
    "dev": "concurrently \\"npm run server\\" \\"npm run client\\"",
    "server": "nodemon server.js",
    "client": "cd client && npm start",
    "build": "cd client && npm run build",
    "install-all": "npm install && cd client && npm install"
  },
  "dependencies": {
    "express": "^4.18.2",
    "cors": "^2.8.5",
    "dotenv": "^16.0.3",
    "sqlite3": "^5.1.6"
  },
  "devDependencies": {
    "nodemon": "^2.0.22",
    "concurrently": "^7.6.0"
  }
}`,
  "server.js": `const express = require('express');
const cors = require('cors');
const path = require('path');
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 5000;

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.static(path.join(__dirname, 'client/build')));

// API Routes
app.get('/api/health', (req, res) => {
  res.json({ message: 'Server is running!' });
});

// Serve React app
app.get('*', (req, res) => {
  res.sendFile(path.join(__dirname, 'client/build', 'index.html'));
});

app.listen(PORT, () => {
  console.log(\`Server running on port \${PORT}\`);
});`,
  "client/package.json": `{
  "name": "client",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@testing-library/jest-dom": "^5.16.5",
    "@testing-library/react": "^13.4.0",
    "@testing-library/user-event": "^13.5.0",
    "@types/jest": "^27.5.2",
    "@types/node": "^16.18.23",
    "@types/react": "^18.0.33",
    "@types/react-dom": "^18.0.11",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-scripts": "5.0.1",
    "typescript": "^4.9.5",
    "web-vitals": "^2.1.4"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "proxy": "http://localhost:5000"
}`,
  "client/src/App.tsx": `import React, { useState, useEffect } from 'react';
import './App.css';

function App() {
  const [message, setMessage] = useState<string>('');

  useEffect(() => {
    fetch('/api/health')
      .then(res => res.json())
      .then(data => setMessage(data.message))
      .catch(err => console.error('Error:', err));
  }, []);

  return (
    <div className="App">
      <header className="App-header">
        <h1>Generated App</h1>
        <p>This is your generated full-stack application!</p>
        <p>Server Status: {message || 'Loading...'}</p>
      </header>
    </div>
  );
}

export default App;`,
  "client/src/index.tsx": `import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';

const root = ReactDOM.createRoot(
  document.getElementById('root') as HTMLElement
);
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);`,
  "client/src/App.css": `.App {
  text-align: center;
}

.App-header {
  background-color: #282c34;
  padding: 20px;
  color: white;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
}

.App-header h1 {
  margin-bottom: 20px;
}

.App-header p {
  margin: 10px 0;
  font-size: 18px;
}`,
  "client/src/index.css": `body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}`,
  "client/public/index.html": `<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Generated full-stack application"
    />
    <title>Generated App</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
  </body>
</html>`,
  "README.md": `# Generated Full-Stack Application

This is a full-stack application generated by our AI platform.

## Tech Stack

- **Backend**: Node.js + Express
- **Frontend**: React + TypeScript
- **Database**: SQLite (development)

## Getting Started

1. Install all dependencies:
   \`\`\`bash
   npm run install-all
   \`\`\`

2. Start the development server:
   \`\`\`bash
   npm run dev
   \`\`\`

3. Open [http://localhost:3000](http://localhost:3000) to view it in the browser.

## Project Structure

- \`server.js\` - Express server
- \`client/\` - React frontend application
- \`package.json\` - Backend dependencies and scripts

## Available Scripts

- \`npm run dev\` - Run both frontend and backend in development mode
- \`npm run server\` - Run only the backend server
- \`npm run client\` - Run only the frontend
- \`npm run build\` - Build the frontend for production

## API Endpoints

- \`GET /api/health\` - Health check endpoint
`,
  ".env.example": `PORT=5000
NODE_ENV=development`,
  "docker-compose.yml": `version: '3.8'

services:
  app:
    build: .
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=production
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
      - /usr/src/app/client/node_modules

networks:
  default:
    name: generated-app-network`,
  "Dockerfile": `FROM node:18-alpine

WORKDIR /usr/src/app

# Copy package files
COPY package*.json ./
COPY client/package*.json ./client/

# Install dependencies
RUN npm install
RUN cd client && npm install

# Copy source code
COPY . .

# Build frontend
RUN cd client && npm run build

EXPOSE 5000

CMD ["node", "server.js"]`
};

async function main() {
  console.log('üå± Starting database seeding...');

  try {
    // Check if template already exists
    const existingTemplate = await prisma.template.findUnique({
      where: { name: 'react-express-base' }
    });

    if (existingTemplate) {
      console.log('‚úÖ Template already exists, updating...');
      const template = await prisma.template.update({
        where: { name: 'react-express-base' },
        data: {
          framework: 'react-express',
          language: 'typescript',
          files: reactExpressTemplate
        }
      });
      console.log('‚úÖ Template updated:', template.name);
    } else {
      // Create the react-express-base template
      const template = await prisma.template.create({
        data: {
          name: 'react-express-base',
          framework: 'react-express',
          language: 'typescript',
          files: reactExpressTemplate
        }
      });
      console.log('‚úÖ Template created:', template.name);
    }

    console.log('üìÅ Template files:', Object.keys(reactExpressTemplate).length);

  } catch (error) {
    console.error('‚ùå Error seeding database:', error);
    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}

main()
  .then(() => {
    console.log('üéâ Database seeding completed successfully!');
  })
  .catch((e) => {
    console.error('‚ùå Seeding failed:', e);
    process.exit(1);
  });