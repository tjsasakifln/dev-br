// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String    @id @default(cuid())
  name             String?
  email            String?   @unique // O email deve ser opcional para NextAuth
  emailVerified    DateTime?
  image            String?   // Adicionar campo para a imagem de perfil
  githubId         String?   @unique
  createdAt        DateTime  @default(now())
  subscriptionTier String    @default("free")
  
  // Relações existentes
  projects         Project[]
  
  // Relações necessárias para o Adaptador NextAuth
  accounts Account[]
  sessions Session[]
}

model Project {
  id            String   @id @default(cuid())
  name          String
  prompt        String
  status        String   @default("PENDING")
  generatedCode Json?
  repositoryUrl String?
  failureReason String?
  userRating    Int?
  userFeedback  String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  user   User   @relation(fields: [userId], references: [id])
  userId String

  generations Generation[]
}

model Generation {
  id              String   @id @default(cuid())
  status          String   @default("queued")
  progress        Int      @default(0)
  logs            Json?
  aiModel         String?
  tokensUsed      Int?
  generatedOutput String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  project   Project @relation(fields: [projectId], references: [id])
  projectId String
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Template {
  id        String   @id @default(cuid())
  name      String   @unique
  framework String
  language  String
  files     Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
